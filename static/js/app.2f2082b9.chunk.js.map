{"version":3,"sources":["hooks/useColorScheme.ts","constants/Colors.ts","components/Themed.tsx","components/StyledText.tsx","components/EditScreenInfo.tsx","screens/ModalScreen.tsx","screens/NotFoundScreen.tsx","screens/TabOneScreen.tsx","screens/TabTwoScreen.tsx","navigation/LinkingConfiguration.ts","navigation/index.tsx","App.tsx","hooks/useCachedResources.ts","assets/fonts/SpaceMono-Regular.ttf"],"names":["useColorScheme","_useColorScheme","light","text","background","tint","tabIconDefault","tabIconSelected","dark","useThemeColor","props","colorName","theme","colorFromProps","Colors","Text","style","lightColor","darkColor","otherProps","color","View","backgroundColor","MonoText","fontFamily","EditScreenInfo","path","styles","getStartedContainer","getStartedText","codeHighlightContainer","homeScreenFilename","helpContainer","TouchableOpacity","onPress","handleHelpPress","helpLink","helpLinkText","WebBrowser","StyleSheet","create","alignItems","marginHorizontal","marginVertical","borderRadius","paddingHorizontal","fontSize","lineHeight","textAlign","marginTop","paddingVertical","ModalScreen","container","title","separator","StatusBar","Platform","OS","flex","justifyContent","fontWeight","height","width","NotFoundScreen","navigation","replace","link","linkText","padding","TabOneScreen","TabTwoScreen","linking","prefixes","Linking","config","screens","Root","TabOne","TabTwo","Modal","NotFound","Navigation","colorScheme","NavigationContainer","LinkingConfiguration","DarkTheme","DefaultTheme","RootNavigator","Stack","createNativeStackNavigator","Navigator","Screen","name","component","BottomTabNavigator","options","headerShown","Group","screenOptions","presentation","BottomTab","createBottomTabNavigator","initialRouteName","tabBarActiveTintColor","tabBarIcon","TabBarIcon","headerRight","Pressable","navigate","opacity","pressed","FontAwesome","size","marginRight","marginBottom","App","isLoadingComplete","useState","setLoadingComplete","useEffect","SplashScreen","Font","font","require","e","console","warn","loadResourcesAndDataAsync","useCachedResources","module","exports"],"mappings":"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","file":"static/js/app.2f2082b9.chunk.js","sourcesContent":["import { ColorSchemeName, useColorScheme as _useColorScheme } from 'react-native';\n\n// The useColorScheme value is always either light or dark, but the built-in\n// type suggests that it can be null. This will not happen in practice, so this\n// makes it a bit easier to work with.\nexport default function useColorScheme(): NonNullable<ColorSchemeName> {\n  return _useColorScheme() as NonNullable<ColorSchemeName>;\n}\n","const tintColorLight = '#2f95dc';\nconst tintColorDark = '#fff';\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n  },\n};\n","/**\n * Learn more about Light and Dark modes:\n * https://docs.expo.io/guides/color-schemes/\n */\n\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import { Text, TextProps } from './Themed';\n\nexport function MonoText(props: TextProps) {\n  return <Text {...props} style={[props.style, { fontFamily: 'space-mono' }]} />;\n}\n","import * as WebBrowser from 'expo-web-browser';\nimport { StyleSheet, TouchableOpacity } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport { MonoText } from './StyledText';\nimport { Text, View } from './Themed';\n\nexport default function EditScreenInfo({ path }: { path: string }) {\n  return (\n    <View>\n      <View style={styles.getStartedContainer}>\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Open up the code for this screen:\n        </Text>\n\n        <View\n          style={[styles.codeHighlightContainer, styles.homeScreenFilename]}\n          darkColor=\"rgba(255,255,255,0.05)\"\n          lightColor=\"rgba(0,0,0,0.05)\">\n          <MonoText>{path}</MonoText>\n        </View>\n\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Change any of the text, save the file, and your app will automatically update.\n        </Text>\n      </View>\n\n      <View style={styles.helpContainer}>\n        <TouchableOpacity onPress={handleHelpPress} style={styles.helpLink}>\n          <Text style={styles.helpLinkText} lightColor={Colors.light.tint}>\n            Tap here if your app doesn't automatically update after making changes\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nfunction handleHelpPress() {\n  WebBrowser.openBrowserAsync(\n    'https://docs.expo.io/get-started/create-a-new-app/#opening-the-app-on-your-phonetablet'\n  );\n}\n\nconst styles = StyleSheet.create({\n  getStartedContainer: {\n    alignItems: 'center',\n    marginHorizontal: 50,\n  },\n  homeScreenFilename: {\n    marginVertical: 7,\n  },\n  codeHighlightContainer: {\n    borderRadius: 3,\n    paddingHorizontal: 4,\n  },\n  getStartedText: {\n    fontSize: 17,\n    lineHeight: 24,\n    textAlign: 'center',\n  },\n  helpContainer: {\n    marginTop: 15,\n    marginHorizontal: 20,\n    alignItems: 'center',\n  },\n  helpLink: {\n    paddingVertical: 15,\n  },\n  helpLinkText: {\n    textAlign: 'center',\n  },\n});\n","import { StatusBar } from 'expo-status-bar';\nimport { Platform, StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\n\nexport default function ModalScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Modal</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/ModalScreen.tsx\" />\n\n      {/* Use a light status bar on iOS to account for the black space above the modal */}\n      <StatusBar style={Platform.OS === 'ios' ? 'light' : 'auto'} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { StyleSheet, TouchableOpacity } from 'react-native';\n\nimport { Text, View } from '../components/Themed';\nimport { RootStackScreenProps } from '../types';\n\nexport default function NotFoundScreen({ navigation }: RootStackScreenProps<'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","import { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\nimport { RootTabScreenProps } from '../types';\n\nexport default function TabOneScreen({ navigation }: RootTabScreenProps<'TabOne'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Tab One</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/TabOneScreen.tsx\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\n\nexport default function TabTwoScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Tab Two</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/TabTwoScreen.tsx\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","/**\n * Learn more about deep linking with React Navigation\n * https://reactnavigation.org/docs/deep-linking\n * https://reactnavigation.org/docs/configuring-links\n */\n\nimport { LinkingOptions } from '@react-navigation/native';\nimport * as Linking from 'expo-linking';\n\nimport { RootStackParamList } from '../types';\n\nconst linking: LinkingOptions<RootStackParamList> = {\n  prefixes: [Linking.createURL('/')],\n  config: {\n    screens: {\n      Root: {\n        screens: {\n          TabOne: {\n            screens: {\n              TabOneScreen: 'one',\n            },\n          },\n          TabTwo: {\n            screens: {\n              TabTwoScreen: 'two',\n            },\n          },\n        },\n      },\n      Modal: 'modal',\n      NotFound: '*',\n    },\n  },\n};\n\nexport default linking;\n","/**\n * If you are not familiar with React Navigation, refer to the \"Fundamentals\" guide:\n * https://reactnavigation.org/docs/getting-started\n *\n */\nimport { FontAwesome } from '@expo/vector-icons';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport * as React from 'react';\nimport { ColorSchemeName, Pressable } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\nimport ModalScreen from '../screens/ModalScreen';\nimport NotFoundScreen from '../screens/NotFoundScreen';\nimport TabOneScreen from '../screens/TabOneScreen';\nimport TabTwoScreen from '../screens/TabTwoScreen';\nimport { RootStackParamList, RootTabParamList, RootTabScreenProps } from '../types';\nimport LinkingConfiguration from './LinkingConfiguration';\n\nexport default function Navigation({ colorScheme }: { colorScheme: ColorSchemeName }) {\n  return (\n    <NavigationContainer\n      linking={LinkingConfiguration}\n      theme={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>\n      <RootNavigator />\n    </NavigationContainer>\n  );\n}\n\n/**\n * A root stack navigator is often used for displaying modals on top of all other content.\n * https://reactnavigation.org/docs/modal\n */\nconst Stack = createNativeStackNavigator<RootStackParamList>();\n\nfunction RootNavigator() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Root\" component={BottomTabNavigator} options={{ headerShown: false }} />\n      <Stack.Screen name=\"NotFound\" component={NotFoundScreen} options={{ title: 'Oops!' }} />\n      <Stack.Group screenOptions={{ presentation: 'modal' }}>\n        <Stack.Screen name=\"Modal\" component={ModalScreen} />\n      </Stack.Group>\n    </Stack.Navigator>\n  );\n}\n\n/**\n * A bottom tab navigator displays tab buttons on the bottom of the display to switch screens.\n * https://reactnavigation.org/docs/bottom-tab-navigator\n */\nconst BottomTab = createBottomTabNavigator<RootTabParamList>();\n\nfunction BottomTabNavigator() {\n  const colorScheme = useColorScheme();\n\n  return (\n    <BottomTab.Navigator\n      initialRouteName=\"TabOne\"\n      screenOptions={{\n        tabBarActiveTintColor: Colors[colorScheme].tint,\n      }}>\n      <BottomTab.Screen\n        name=\"TabOne\"\n        component={TabOneScreen}\n        options={({ navigation }: RootTabScreenProps<'TabOne'>) => ({\n          title: 'Tab One',\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"code\" color={color} />,\n          headerRight: () => (\n            <Pressable\n              onPress={() => navigation.navigate('Modal')}\n              style={({ pressed }) => ({\n                opacity: pressed ? 0.5 : 1,\n              })}>\n              <FontAwesome\n                name=\"info-circle\"\n                size={25}\n                color={Colors[colorScheme].text}\n                style={{ marginRight: 15 }}\n              />\n            </Pressable>\n          ),\n        })}\n      />\n      <BottomTab.Screen\n        name=\"TabTwo\"\n        component={TabTwoScreen}\n        options={{\n          title: 'Tab Two',\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"code\" color={color} />,\n        }}\n      />\n    </BottomTab.Navigator>\n  );\n}\n\n/**\n * You can explore the built-in icon families and icons on the web at https://icons.expo.fyi/\n */\nfunction TabBarIcon(props: {\n  name: React.ComponentProps<typeof FontAwesome>['name'];\n  color: string;\n}) {\n  return <FontAwesome size={30} style={{ marginBottom: -3 }} {...props} />;\n}\n","import { StatusBar } from 'expo-status-bar';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nimport useCachedResources from './hooks/useCachedResources';\nimport useColorScheme from './hooks/useColorScheme';\nimport Navigation from './navigation';\n\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n  const colorScheme = useColorScheme();\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <SafeAreaProvider>\n        <Navigation colorScheme={colorScheme} />\n        <StatusBar />\n      </SafeAreaProvider>\n    );\n  }\n}\n","import { FontAwesome } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport { useEffect, useState } from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...FontAwesome.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}